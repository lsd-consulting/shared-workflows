# This workflow will auto-approve Renovate PRs for minor/patch updates when required checks are enabled.
# Auto-merge is handled by Renovate itself via platformAutomerge configuration.

name: Renovate auto-approve
on: 
  workflow_call:

jobs:
  renovate-auto-approve:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'renovate[bot]' }}
    permissions:
      contents: read
      pull-requests: write
      repository-projects: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Check for required checks
        id: check-required
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking PR status checks for PR #${{ github.event.number }}"
          
          # Get PR status - if it's mergeable and not blocked, assume required checks exist
          pr_status=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.number }} --jq '.mergeable_state')
          echo "PR mergeable state: $pr_status"
          
          # Check if there are any pending/failing status checks
          status_checks=$(gh api repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/status --jq '.statuses | length')
          echo "Status checks count: $status_checks"
          
          if [ "$pr_status" = "blocked" ] || [ "$status_checks" -gt 0 ]; then
            echo "has-required=true" >> $GITHUB_OUTPUT
            echo "required checks detected (PR state: $pr_status) ✅"
          else
            echo "has-required=false" >> $GITHUB_OUTPUT
            echo "no required checks detected ❌"
          fi

      - name: Parse Renovate PR metadata
        if: github.actor == 'renovate[bot]'
        id: renovate-metadata
        run: |
          PR_TITLE='${{ github.event.pull_request.title }}'
          PR_LABELS='${{ toJson(github.event.pull_request.labels.*.name) }}'
          
          echo "PR Title: $PR_TITLE"
          echo "PR Labels: $PR_LABELS"
          
          # Determine update type from PR labels (try multiple patterns)
          UPDATE_TYPE="unknown"
          
          # Check for Renovate semantic version labels
          if echo "$PR_LABELS" | grep -qiE "patch"; then
            UPDATE_TYPE="patch"
          elif echo "$PR_LABELS" | grep -qiE "minor"; then
            UPDATE_TYPE="minor"
          elif echo "$PR_LABELS" | grep -qiE "major"; then
            UPDATE_TYPE="major"
          # Check for conventional commit prefixes in title
          elif echo "$PR_TITLE" | grep -qE "^fix\(deps\):"; then
            UPDATE_TYPE="patch"
            echo "Detected fix(deps) prefix - treating as patch"
          elif echo "$PR_TITLE" | grep -qE "^feat\(deps\):"; then
            UPDATE_TYPE="minor"
            echo "Detected feat(deps) prefix - treating as minor"
          elif echo "$PR_TITLE" | grep -qE "^chore\(deps\):"; then
            # For chore(deps), we can't determine type safely - leave as unknown
            UPDATE_TYPE="unknown"
            echo "Detected chore(deps) prefix - cannot determine update type safely"
          fi
          
          echo "update-type=$UPDATE_TYPE" >> $GITHUB_OUTPUT
          
          echo "Parsed metadata:"
          echo "  Update type: $UPDATE_TYPE"
          echo "  Detected from: $([ "$UPDATE_TYPE" != "unknown" ] && echo "labels/title analysis" || echo "unable to determine")"

      - name: Auto-approve minor or patch
        if: |
          steps.check-required.outputs.has-required == 'true' &&
          (steps.renovate-metadata.outputs.update-type == 'patch' || 
           steps.renovate-metadata.outputs.update-type == 'minor')
        run: |
          UPDATE_TYPE="${{ steps.renovate-metadata.outputs.update-type }}"
          
          REASON="Auto-approved $UPDATE_TYPE update"
          
          gh pr review ${{ github.event.number }} --approve --body "$REASON ✅"
          echo "✅ $REASON"
        env:
          GH_TOKEN: ${{ secrets.AUTO_MERGE }}

      - name: Skip major updates
        if: |
          steps.renovate-metadata.outputs.update-type == 'major'
        run: |
          echo "⚠️ Skipping auto-approval for major update - requires manual review"